{PMA 4. Simular la atención en un locutorio con 10 cabinas telefónicas, que tiene un empleado que 
se encarga de atender a los clientes. Hay N clientes que al llegar esperan hasta que el 
empleado les indica a que cabina ir, la usan y luego se dirigen al empleado para pagarle. El 
empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando 
prioridad a los que terminaron de usar la cabina. Nota: maximizar la concurrencia; suponga 
que hay una función Cobrar() llamada por el empleado que simula que el empleado le cobra 
al cliente.}

Chan Llegada(int);
Chan Cabina[N](int); //empleado le entrega a cliente la cabina a usar, canal privado 
Chan Pagar(int, int); //cliente solicita pagar a empleado
Chan Comprobante[N](texto); //empleado le entrega comprobante a cliente, canal privado

Process cliente [id: 0..N-1] {
  int nroCabina;
  texto comprobante;
  send Llegada(id); //el cliente llega al locutorio 
  receive Cabina[id](nroCabina); //espera a recibir la cabina a utilizar
  usarCabina(nroCabina); //usa la cabina
  send Pagar(id, nroCabina);
  receiveComprobante[id](comprobante); //recibe comprobante de pago
  --se va;
}

Process Empleado {
  int idC;
  int nroC;
  int cabinaDesocupada;
  texto comp;
  Queue cabinas = <1, 2, 3, ..., 10>;
  while(true) {
    while (not empty(Pagar)) { //le da prioridad a los que esperan por pagar
       receive Pagar(idC, cabinaDesocupada); //recibe id de cliente que va a pagar y nro cabina
       cabinas.push(cabinaDesocupada); 
       cobrar(comp); //cobra
       send Comprobante[idC](comp); //le da comprobante
    }
    //si no hay nadie mas esperando para cobrar, recién ahí espera en canal Llegada:
    receive Llegada(idC); //espera al proximo a atender
    nroC = cabinas.pop(); //toma cabina disponible
    send Cabina[idC](nroC); //le dice al cliente que cabina usar
      
   }
    
 }
}